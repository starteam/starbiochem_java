/* Generated by star.annotations.GeneratedClass, all changes will be lost */

package molecule.ui;

public abstract class MoleculesContainer_generated extends javax.swing.JTabbedPane implements app.signal.CloseMoleculeRaiser, star.event.EventController, star.event.Listener
{
	private star.event.Adapter adapter;
	private static final long serialVersionUID = 1L;

	public  MoleculesContainer_generated()
	{
		super();
	}
	 
	public  MoleculesContainer_generated(int int0, int int1)
	{
		super( int0,int1);
	}
	 
	public  MoleculesContainer_generated(int int0)
	{
		super( int0);
	}
	 
	public void addNotify()
	{
		super.addNotify();
		getAdapter().addHandled(app.signal.SampleOpenEvent.class);
		getAdapter().addHandled(app.signal.ImportOpenEvent.class);
		getAdapter().addHandled(app.signal.CloseAllMoleculesEvent.class);
		getAdapter().addHandled(app.signal.ResetAllMoleculesEvent.class);
		getAdapter().addHandled(app.signal.ResetMoleculeEvent.class);
		getAdapter().addHandled(app.signal.CloseMoleculeEvent.class);
		getAdapter().addHandled(app.signal.ResetSceneEvent.class);
		getAdapter().addHandled(app.signal.FileOpenEvent.class);
	}
	 
	public void eventRaised(final star.event.Event event)
	{
		eventRaisedHandles(event);
	}
	 
	private void eventRaisedHandles(final star.event.Event event)
	{
		if( event.getClass().getName().equals( "app.signal.SampleOpenEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handlePdbOpenRaiser( (app.signal.SampleOpenRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handlePdbOpenRaiser "  + ( end-start )/1000000 ); } }},this,2);
		}if( event.getClass().getName().equals( "app.signal.ImportOpenEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handleImportOpenRaiser( (app.signal.ImportOpenRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleImportOpenRaiser "  + ( end-start )/1000000 ); } }},this,2);
		}if( event.getClass().getName().equals( "app.signal.CloseAllMoleculesEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handleCloseAllMoleculesRaiser( (app.signal.CloseAllMoleculesRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleCloseAllMoleculesRaiser "  + ( end-start )/1000000 ); } }},this,2);
		}if( event.getClass().getName().equals( "app.signal.ResetAllMoleculesEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handleResetAllMoleculesRaiser( (app.signal.ResetAllMoleculesRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleResetAllMoleculesRaiser "  + ( end-start )/1000000 ); } }},this,2);
		}if( event.getClass().getName().equals( "app.signal.ResetMoleculeEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handleResetMoleculeRaiser( (app.signal.ResetMoleculeRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleResetMoleculeRaiser "  + ( end-start )/1000000 ); } }},this,2);
		}if( event.getClass().getName().equals( "app.signal.CloseMoleculeEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handleCloseMoleculeRaiser( (app.signal.CloseMoleculeRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleCloseMoleculeRaiser "  + ( end-start )/1000000 ); } }},this,2);
		}if( event.getClass().getName().equals( "app.signal.ResetSceneEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handleResetSceneRaiser( (app.signal.ResetSceneRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleResetSceneRaiser "  + ( end-start )/1000000 ); } }},this,2);
		}if( event.getClass().getName().equals( "app.signal.FileOpenEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handleFileOpenRaiser( (app.signal.FileOpenRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleFileOpenRaiser "  + ( end-start )/1000000 ); } }},this,2);
		}
	}
	 
	public star.event.Adapter getAdapter()
	{
		if( adapter == null )
		{
			adapter = new star.event.Adapter(this);
		}
		return adapter;
	}
	 
	abstract void handleCloseAllMoleculesRaiser(app.signal.CloseAllMoleculesRaiser raiser);
	 
	abstract void handleCloseMoleculeRaiser(app.signal.CloseMoleculeRaiser raiser);
	 
	abstract void handleFileOpenRaiser(app.signal.FileOpenRaiser raiser);
	 
	abstract void handleImportOpenRaiser(app.signal.ImportOpenRaiser raiser);
	 
	abstract void handlePdbOpenRaiser(app.signal.SampleOpenRaiser raiser);
	 
	abstract void handleResetAllMoleculesRaiser(app.signal.ResetAllMoleculesRaiser raiser);
	 
	abstract void handleResetMoleculeRaiser(app.signal.ResetMoleculeRaiser raiser);
	 
	abstract void handleResetSceneRaiser(app.signal.ResetSceneRaiser raiser);
	 
	public void raise_CloseMoleculeEvent()
	{
		(new app.signal.CloseMoleculeEvent(this)).raise();
	}
	 
	public void removeNotify()
	{
		super.removeNotify();
		getAdapter().removeHandled(app.signal.SampleOpenEvent.class);
		getAdapter().removeHandled(app.signal.ImportOpenEvent.class);
		getAdapter().removeHandled(app.signal.CloseAllMoleculesEvent.class);
		getAdapter().removeHandled(app.signal.ResetAllMoleculesEvent.class);
		getAdapter().removeHandled(app.signal.ResetMoleculeEvent.class);
		getAdapter().removeHandled(app.signal.CloseMoleculeEvent.class);
		getAdapter().removeHandled(app.signal.ResetSceneEvent.class);
		getAdapter().removeHandled(app.signal.FileOpenEvent.class);
	}
	 
}
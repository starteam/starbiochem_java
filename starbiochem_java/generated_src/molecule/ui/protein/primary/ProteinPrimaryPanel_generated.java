/* Generated by star.annotations.GeneratedClass, all changes will be lost */

package molecule.ui.protein.primary;

public abstract class ProteinPrimaryPanel_generated extends molecule.ui.AbstractMoleculeUI implements molecule.ui.signal.RenderingInfoRaiser, star.event.EventController, star.event.Listener
{
	private java.util.prefs.Preferences preferences = null;
	private static final long serialVersionUID = 1L;

	public  ProteinPrimaryPanel_generated()
	{
		super();
	}
	 
	public void addNotify()
	{
		super.addNotify();
		getAdapter().addHandled(molecule.ui.protein.primary.signal.ProteinPrimarySelectionEvent.class);
		getAdapter().addHandled(molecule.ui.protein.tertiary.signal.ProteinTertiaryFilterEvent.class);
		getAdapter().addHandled(molecule.ui.protein.tertiary.signal.ProteinTertiaryRenderingModeEvent.class);
		getAdapter().addHandled(molecule.ui.protein.primary.signal.ProteinPrimaryTranslucencyEvent.class);
		getAdapter().addHandled(molecule.ui.protein.primary.signal.ProteinPrimaryRenderingModeEvent.class);
		getAdapter().addHandled(molecule.ui.protein.primary.signal.ProteinPrimaryApplyRenderingEvent.class);
		getAdapter().addHandled(molecule.ui.protein.tertiary.signal.ProteinTertiarySSBondSizeEvent.class);
		getAdapter().addHandled(molecule.ui.protein.primary.signal.ProteinPrimaryFilterEvent.class);
		getAdapter().addHandled(molecule.ui.protein.primary.signal.ProteinPrimaryBondTranslucencyEvent.class);
		getAdapter().addHandled(molecule.ui.protein.tertiary.signal.ProteinTertiarySSBondTranslucencyEvent.class);
		getAdapter().addHandled(molecule.ui.protein.primary.signal.ProteinPrimarySizeEvent.class);
	}
	 
	public void eventRaised(final star.event.Event event)
	{
		eventRaisedHandles(event);
	}
	 
	private void eventRaisedHandles(final star.event.Event event)
	{
		if( event.getClass().getName().equals( "molecule.ui.protein.primary.signal.ProteinPrimarySelectionEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handleProteinPrimarySelectionRaiser( (molecule.ui.protein.primary.signal.ProteinPrimarySelectionRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleProteinPrimarySelectionRaiser "  + ( end-start )/1000000 ); } }},this,2);
		}if( event.getClass().getName().equals( "molecule.ui.protein.tertiary.signal.ProteinTertiaryFilterEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handleProteinTertiaryFilterRaiser( (molecule.ui.protein.tertiary.signal.ProteinTertiaryFilterRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleProteinTertiaryFilterRaiser "  + ( end-start )/1000000 ); } }},this,2);
		}if( event.getClass().getName().equals( "molecule.ui.protein.tertiary.signal.ProteinTertiaryRenderingModeEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handleProteinTertiaryRenderingModeRaiser( (molecule.ui.protein.tertiary.signal.ProteinTertiaryRenderingModeRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleProteinTertiaryRenderingModeRaiser "  + ( end-start )/1000000 ); } }},this,2);
		}if( event.getClass().getName().equals( "molecule.ui.protein.primary.signal.ProteinPrimaryTranslucencyEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handleProteinPrimaryTranslucencyRaiser( (molecule.ui.protein.primary.signal.ProteinPrimaryTranslucencyRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleProteinPrimaryTranslucencyRaiser "  + ( end-start )/1000000 ); } }},this,2);
		}if( event.getClass().getName().equals( "molecule.ui.protein.primary.signal.ProteinPrimaryRenderingModeEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handleProteinPrimaryRenderingModeRaiser( (molecule.ui.protein.primary.signal.ProteinPrimaryRenderingModeRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleProteinPrimaryRenderingModeRaiser "  + ( end-start )/1000000 ); } }},this,2);
		}if( event.getClass().getName().equals( "molecule.ui.protein.primary.signal.ProteinPrimaryApplyRenderingEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handleProteinPrimaryApplyRenderingRaiser( (molecule.ui.protein.primary.signal.ProteinPrimaryApplyRenderingRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleProteinPrimaryApplyRenderingRaiser "  + ( end-start )/1000000 ); } }},this,2);
		}if( event.getClass().getName().equals( "molecule.ui.protein.tertiary.signal.ProteinTertiarySSBondSizeEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handleProteinTertiarySSBondSizeRaiser( (molecule.ui.protein.tertiary.signal.ProteinTertiarySSBondSizeRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleProteinTertiarySSBondSizeRaiser "  + ( end-start )/1000000 ); } }},this,2);
		}if( event.getClass().getName().equals( "molecule.ui.protein.primary.signal.ProteinPrimaryFilterEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handleProteinPrimaryFilterRaiser( (molecule.ui.protein.primary.signal.ProteinPrimaryFilterRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleProteinPrimaryFilterRaiser "  + ( end-start )/1000000 ); } }},this,2);
		}if( event.getClass().getName().equals( "molecule.ui.protein.primary.signal.ProteinPrimaryBondTranslucencyEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handleProteinPrimaryBondTranslucencyRaiser( (molecule.ui.protein.primary.signal.ProteinPrimaryBondTranslucencyRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleProteinPrimaryBondTranslucencyRaiser "  + ( end-start )/1000000 ); } }},this,2);
		}if( event.getClass().getName().equals( "molecule.ui.protein.tertiary.signal.ProteinTertiarySSBondTranslucencyEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handleProteinTertiarySSBondTranslucencyRaiser( (molecule.ui.protein.tertiary.signal.ProteinTertiarySSBondTranslucencyRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleProteinTertiarySSBondTranslucencyRaiser "  + ( end-start )/1000000 ); } }},this,2);
		}if( event.getClass().getName().equals( "molecule.ui.protein.primary.signal.ProteinPrimarySizeEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handleProteinPrimarySizeRaiser( (molecule.ui.protein.primary.signal.ProteinPrimarySizeRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleProteinPrimarySizeRaiser "  + ( end-start )/1000000 ); } }},this,2);
		}
	}
	 
	public java.util.prefs.Preferences getPreferences(java.lang.String name)
	{
		try
		{
			plugin.preferences.Preferences pref = (plugin.preferences.Preferences) plugin.Loader.getDefaultLoader().getPlugin(plugin.preferences.Preferences.class.getName(), plugin.preferences.PreferencesImplementation.class.getName());
			this.preferences = pref.getPreferences(name);
		}
		catch( plugin.PluginException ex )
		{
			ex.printStackTrace();
		}
		return preferences;
	}
	 
	public java.util.prefs.Preferences getPreferences()
	{
		if( preferences == null )
		{
			try
			{
				plugin.preferences.Preferences pref = (plugin.preferences.Preferences) plugin.Loader.getDefaultLoader().getPlugin(plugin.preferences.Preferences.class.getName(), plugin.preferences.PreferencesImplementation.class.getName());
				this.preferences = pref.getPreferences("molecule.ui.protein.primary.ProteinPrimaryPanel");
			}
			catch( plugin.PluginException ex )
			{
				ex.printStackTrace();
			}
		}
		return preferences;
	}
	 
	abstract void handleProteinPrimaryApplyRenderingRaiser(molecule.ui.protein.primary.signal.ProteinPrimaryApplyRenderingRaiser raiser);
	 
	abstract void handleProteinPrimaryBondTranslucencyRaiser(molecule.ui.protein.primary.signal.ProteinPrimaryBondTranslucencyRaiser raiser);
	 
	abstract void handleProteinPrimaryFilterRaiser(molecule.ui.protein.primary.signal.ProteinPrimaryFilterRaiser raiser);
	 
	abstract void handleProteinPrimaryRenderingModeRaiser(molecule.ui.protein.primary.signal.ProteinPrimaryRenderingModeRaiser raiser);
	 
	abstract void handleProteinPrimarySelectionRaiser(molecule.ui.protein.primary.signal.ProteinPrimarySelectionRaiser raiser);
	 
	abstract void handleProteinPrimarySizeRaiser(molecule.ui.protein.primary.signal.ProteinPrimarySizeRaiser raiser);
	 
	abstract void handleProteinPrimaryTranslucencyRaiser(molecule.ui.protein.primary.signal.ProteinPrimaryTranslucencyRaiser raiser);
	 
	abstract void handleProteinTertiaryFilterRaiser(molecule.ui.protein.tertiary.signal.ProteinTertiaryFilterRaiser raiser);
	 
	abstract void handleProteinTertiaryRenderingModeRaiser(molecule.ui.protein.tertiary.signal.ProteinTertiaryRenderingModeRaiser raiser);
	 
	abstract void handleProteinTertiarySSBondSizeRaiser(molecule.ui.protein.tertiary.signal.ProteinTertiarySSBondSizeRaiser raiser);
	 
	abstract void handleProteinTertiarySSBondTranslucencyRaiser(molecule.ui.protein.tertiary.signal.ProteinTertiarySSBondTranslucencyRaiser raiser);
	 
	public void raise_RenderingInfoEvent()
	{
		(new molecule.ui.signal.RenderingInfoEvent(this)).raise();
	}
	 
	public void removeNotify()
	{
		super.removeNotify();
		getAdapter().removeHandled(molecule.ui.protein.primary.signal.ProteinPrimarySelectionEvent.class);
		getAdapter().removeHandled(molecule.ui.protein.tertiary.signal.ProteinTertiaryFilterEvent.class);
		getAdapter().removeHandled(molecule.ui.protein.tertiary.signal.ProteinTertiaryRenderingModeEvent.class);
		getAdapter().removeHandled(molecule.ui.protein.primary.signal.ProteinPrimaryTranslucencyEvent.class);
		getAdapter().removeHandled(molecule.ui.protein.primary.signal.ProteinPrimaryRenderingModeEvent.class);
		getAdapter().removeHandled(molecule.ui.protein.primary.signal.ProteinPrimaryApplyRenderingEvent.class);
		getAdapter().removeHandled(molecule.ui.protein.tertiary.signal.ProteinTertiarySSBondSizeEvent.class);
		getAdapter().removeHandled(molecule.ui.protein.primary.signal.ProteinPrimaryFilterEvent.class);
		getAdapter().removeHandled(molecule.ui.protein.primary.signal.ProteinPrimaryBondTranslucencyEvent.class);
		getAdapter().removeHandled(molecule.ui.protein.tertiary.signal.ProteinTertiarySSBondTranslucencyEvent.class);
		getAdapter().removeHandled(molecule.ui.protein.primary.signal.ProteinPrimarySizeEvent.class);
	}
	 
}
/* Generated by star.annotations.GeneratedClass, all changes will be lost */

package molecule.ui.nucleic;

public abstract class NucleicPanel_generated extends molecule.ui.AbstractNonProteinMoleculeUI implements molecule.ui.signal.RenderingInfoRaiser, star.event.EventController, star.event.Listener
{
	private java.util.prefs.Preferences preferences = null;
	private static final long serialVersionUID = 1L;

	public  NucleicPanel_generated()
	{
		super();
	}
	 
	public void addNotify()
	{
		super.addNotify();
		getAdapter().addHandled(molecule.ui.nucleic.signal.NucleicSelectionEvent.class);
		getAdapter().addHandled(molecule.ui.nucleic.signal.NucleicHBondTranslucencyEvent.class);
		getAdapter().addHandled(molecule.ui.nucleic.signal.NucleicApplyRenderingEvent.class);
		getAdapter().addHandled(molecule.ui.nucleic.signal.NucleicRenderingModeEvent.class);
		getAdapter().addHandled(molecule.ui.nucleic.signal.NucleicSizeEvent.class);
		getAdapter().addHandled(molecule.ui.nucleic.signal.NucleicHBondSizeEvent.class);
		getAdapter().addHandled(molecule.ui.nucleic.signal.NucleicFilterEvent.class);
		getAdapter().addHandled(molecule.ui.nucleic.signal.NucleicTranslucencyEvent.class);
		getAdapter().addHandled(molecule.ui.nucleic.signal.NucleicBondTranslucencyEvent.class);
	}
	 
	public void eventRaised(final star.event.Event event)
	{
		eventRaisedHandles(event);
	}
	 
	private void eventRaisedHandles(final star.event.Event event)
	{
		if( event.getClass().getName().equals( "molecule.ui.nucleic.signal.NucleicSelectionEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handleNucleicSelectionRaiser( (molecule.ui.nucleic.signal.NucleicSelectionRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleNucleicSelectionRaiser "  + ( end-start )/1000000 ); } }},this,2);
		}if( event.getClass().getName().equals( "molecule.ui.nucleic.signal.NucleicHBondTranslucencyEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handleNucleicHBondTranslucencyRaiser( (molecule.ui.nucleic.signal.NucleicHBondTranslucencyRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleNucleicHBondTranslucencyRaiser "  + ( end-start )/1000000 ); } }},this,2);
		}if( event.getClass().getName().equals( "molecule.ui.nucleic.signal.NucleicApplyRenderingEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handleNucleicApplyRenderingRaiser( (molecule.ui.nucleic.signal.NucleicApplyRenderingRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleNucleicApplyRenderingRaiser "  + ( end-start )/1000000 ); } }},this,2);
		}if( event.getClass().getName().equals( "molecule.ui.nucleic.signal.NucleicRenderingModeEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handleNucleicRenderingModeRaiser( (molecule.ui.nucleic.signal.NucleicRenderingModeRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleNucleicRenderingModeRaiser "  + ( end-start )/1000000 ); } }},this,2);
		}if( event.getClass().getName().equals( "molecule.ui.nucleic.signal.NucleicSizeEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handleNucleicSizeRaiser( (molecule.ui.nucleic.signal.NucleicSizeRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleNucleicSizeRaiser "  + ( end-start )/1000000 ); } }},this,2);
		}if( event.getClass().getName().equals( "molecule.ui.nucleic.signal.NucleicHBondSizeEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handleNucleicHBondSizeRaiser( (molecule.ui.nucleic.signal.NucleicHBondSizeRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleNucleicHBondSizeRaiser "  + ( end-start )/1000000 ); } }},this,2);
		}if( event.getClass().getName().equals( "molecule.ui.nucleic.signal.NucleicFilterEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handleNucleicFilterRaiser( (molecule.ui.nucleic.signal.NucleicFilterRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleNucleicFilterRaiser "  + ( end-start )/1000000 ); } }},this,2);
		}if( event.getClass().getName().equals( "molecule.ui.nucleic.signal.NucleicTranslucencyEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handleNucleicTranslucencyRaiser( (molecule.ui.nucleic.signal.NucleicTranslucencyRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleNucleicTranslucencyRaiser "  + ( end-start )/1000000 ); } }},this,2);
		}if( event.getClass().getName().equals( "molecule.ui.nucleic.signal.NucleicBondTranslucencyEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handleNucleicBondTranslucencyRaiser( (molecule.ui.nucleic.signal.NucleicBondTranslucencyRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleNucleicBondTranslucencyRaiser "  + ( end-start )/1000000 ); } }},this,2);
		}
	}
	 
	public java.util.prefs.Preferences getPreferences(java.lang.String name)
	{
		try
		{
			plugin.preferences.Preferences pref = (plugin.preferences.Preferences) plugin.Loader.getDefaultLoader().getPlugin(plugin.preferences.Preferences.class.getName(), plugin.preferences.PreferencesImplementation.class.getName());
			this.preferences = pref.getPreferences(name);
		}
		catch( plugin.PluginException ex )
		{
			ex.printStackTrace();
		}
		return preferences;
	}
	 
	public java.util.prefs.Preferences getPreferences()
	{
		if( preferences == null )
		{
			try
			{
				plugin.preferences.Preferences pref = (plugin.preferences.Preferences) plugin.Loader.getDefaultLoader().getPlugin(plugin.preferences.Preferences.class.getName(), plugin.preferences.PreferencesImplementation.class.getName());
				this.preferences = pref.getPreferences("molecule.ui.nucleic.NucleicPanel");
			}
			catch( plugin.PluginException ex )
			{
				ex.printStackTrace();
			}
		}
		return preferences;
	}
	 
	abstract void handleNucleicApplyRenderingRaiser(molecule.ui.nucleic.signal.NucleicApplyRenderingRaiser raiser);
	 
	abstract void handleNucleicBondTranslucencyRaiser(molecule.ui.nucleic.signal.NucleicBondTranslucencyRaiser raiser);
	 
	abstract void handleNucleicFilterRaiser(molecule.ui.nucleic.signal.NucleicFilterRaiser raiser);
	 
	abstract void handleNucleicHBondSizeRaiser(molecule.ui.nucleic.signal.NucleicHBondSizeRaiser raiser);
	 
	abstract void handleNucleicHBondTranslucencyRaiser(molecule.ui.nucleic.signal.NucleicHBondTranslucencyRaiser raiser);
	 
	abstract void handleNucleicRenderingModeRaiser(molecule.ui.nucleic.signal.NucleicRenderingModeRaiser raiser);
	 
	abstract void handleNucleicSelectionRaiser(molecule.ui.nucleic.signal.NucleicSelectionRaiser raiser);
	 
	abstract void handleNucleicSizeRaiser(molecule.ui.nucleic.signal.NucleicSizeRaiser raiser);
	 
	abstract void handleNucleicTranslucencyRaiser(molecule.ui.nucleic.signal.NucleicTranslucencyRaiser raiser);
	 
	public void raise_RenderingInfoEvent()
	{
		(new molecule.ui.signal.RenderingInfoEvent(this)).raise();
	}
	 
	public void removeNotify()
	{
		super.removeNotify();
		getAdapter().removeHandled(molecule.ui.nucleic.signal.NucleicSelectionEvent.class);
		getAdapter().removeHandled(molecule.ui.nucleic.signal.NucleicHBondTranslucencyEvent.class);
		getAdapter().removeHandled(molecule.ui.nucleic.signal.NucleicApplyRenderingEvent.class);
		getAdapter().removeHandled(molecule.ui.nucleic.signal.NucleicRenderingModeEvent.class);
		getAdapter().removeHandled(molecule.ui.nucleic.signal.NucleicSizeEvent.class);
		getAdapter().removeHandled(molecule.ui.nucleic.signal.NucleicHBondSizeEvent.class);
		getAdapter().removeHandled(molecule.ui.nucleic.signal.NucleicFilterEvent.class);
		getAdapter().removeHandled(molecule.ui.nucleic.signal.NucleicTranslucencyEvent.class);
		getAdapter().removeHandled(molecule.ui.nucleic.signal.NucleicBondTranslucencyEvent.class);
	}
	 
}
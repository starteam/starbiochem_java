/* Generated by star.annotations.GeneratedClass, all changes will be lost */

package molecule.ui.adjust;

public abstract class AdjustPanel_generated extends javax.swing.JPanel implements molecule.ui.signal.AdjustInfoRaiser, star.event.EventController, star.event.Listener
{
	private star.event.Adapter adapter;
	private java.util.prefs.Preferences preferences = null;
	private static final long serialVersionUID = 1L;

	public  AdjustPanel_generated()
	{
		super();
	}
	 
	public  AdjustPanel_generated(boolean boolean0)
	{
		super( boolean0);
	}
	 
	public  AdjustPanel_generated(java.awt.LayoutManager layoutManager, boolean boolean0)
	{
		super( layoutManager,boolean0);
	}
	 
	public  AdjustPanel_generated(java.awt.LayoutManager layoutManager)
	{
		super( layoutManager);
	}
	 
	public void addNotify()
	{
		super.addNotify();
		getAdapter().addHandled(molecule.ui.adjust.center.water.signal.CenterWaterSelectionEvent.class);
		getAdapter().addHandled(molecule.ui.adjust.center.protein.primary.signal.CenterProteinPrimaryEvent.class);
		getAdapter().addHandled(molecule.ui.adjust.center.protein.tertiary.signal.CenterProteinTertiaryEvent.class);
		getAdapter().addHandled(molecule.ui.adjust.center.protein.quaternary.signal.CenterProteinQuaternaryEvent.class);
		getAdapter().addHandled(molecule.ui.adjust.center.protein.secondary.signal.CenterProteinSecondaryEvent.class);
		getAdapter().addHandled(molecule.ui.adjust.center.nucleic.signal.CenterNucleicEvent.class);
		getAdapter().addHandled(molecule.ui.adjust.center.hetero.signal.CenterHeteroSelectionEvent.class);
		getAdapter().addHandled(molecule.ui.adjust.signal.RestrictRadiusEvent.class);
	}
	 
	public void eventRaised(final star.event.Event event)
	{
		eventRaisedHandles(event);
	}
	 
	private void eventRaisedHandles(final star.event.Event event)
	{
		if( event.getClass().getName().equals( "molecule.ui.adjust.center.water.signal.CenterWaterSelectionEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handleCenterWaterSelectionRaiser( (molecule.ui.adjust.center.water.signal.CenterWaterSelectionRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleCenterWaterSelectionRaiser "  + ( end-start )/1000000 ); } }},this,2);
		}if( event.getClass().getName().equals( "molecule.ui.adjust.center.protein.primary.signal.CenterProteinPrimaryEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handleCenterProteinPrimaryRaiser( (molecule.ui.adjust.center.protein.primary.signal.CenterProteinPrimaryRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleCenterProteinPrimaryRaiser "  + ( end-start )/1000000 ); } }},this,2);
		}if( event.getClass().getName().equals( "molecule.ui.adjust.center.protein.tertiary.signal.CenterProteinTertiaryEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handleCenterProteinTertiaryRaiser( (molecule.ui.adjust.center.protein.tertiary.signal.CenterProteinTertiaryRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleCenterProteinTertiaryRaiser "  + ( end-start )/1000000 ); } }},this,2);
		}if( event.getClass().getName().equals( "molecule.ui.adjust.center.protein.quaternary.signal.CenterProteinQuaternaryEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handleCenterProteinQuaternaryRaiser( (molecule.ui.adjust.center.protein.quaternary.signal.CenterProteinQuaternaryRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleCenterProteinQuaternaryRaiser "  + ( end-start )/1000000 ); } }},this,2);
		}if( event.getClass().getName().equals( "molecule.ui.adjust.center.protein.secondary.signal.CenterProteinSecondaryEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handleCenterProteinSecondaryRaiser( (molecule.ui.adjust.center.protein.secondary.signal.CenterProteinSecondaryRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleCenterProteinSecondaryRaiser "  + ( end-start )/1000000 ); } }},this,2);
		}if( event.getClass().getName().equals( "molecule.ui.adjust.center.nucleic.signal.CenterNucleicEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handleCenterNucleicRaiser( (molecule.ui.adjust.center.nucleic.signal.CenterNucleicRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleCenterNucleicRaiser "  + ( end-start )/1000000 ); } }},this,2);
		}if( event.getClass().getName().equals( "molecule.ui.adjust.center.hetero.signal.CenterHeteroSelectionEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handleCenterHeteroSelectionRaiser( (molecule.ui.adjust.center.hetero.signal.CenterHeteroSelectionRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleCenterHeteroSelectionRaiser "  + ( end-start )/1000000 ); } }},this,2);
		}if( event.getClass().getName().equals( "molecule.ui.adjust.signal.RestrictRadiusEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handleRestrictRadiusRaiser( (molecule.ui.adjust.signal.RestrictRadiusRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleRestrictRadiusRaiser "  + ( end-start )/1000000 ); } }},this,2);
		}
	}
	 
	public star.event.Adapter getAdapter()
	{
		if( adapter == null )
		{
			adapter = new star.event.Adapter(this);
		}
		return adapter;
	}
	 
	public java.util.prefs.Preferences getPreferences(java.lang.String name)
	{
		try
		{
			plugin.preferences.Preferences pref = (plugin.preferences.Preferences) plugin.Loader.getDefaultLoader().getPlugin(plugin.preferences.Preferences.class.getName(), plugin.preferences.PreferencesImplementation.class.getName());
			this.preferences = pref.getPreferences(name);
		}
		catch( plugin.PluginException ex )
		{
			ex.printStackTrace();
		}
		return preferences;
	}
	 
	public java.util.prefs.Preferences getPreferences()
	{
		if( preferences == null )
		{
			try
			{
				plugin.preferences.Preferences pref = (plugin.preferences.Preferences) plugin.Loader.getDefaultLoader().getPlugin(plugin.preferences.Preferences.class.getName(), plugin.preferences.PreferencesImplementation.class.getName());
				this.preferences = pref.getPreferences("molecule.ui.adjust.AdjustPanel");
			}
			catch( plugin.PluginException ex )
			{
				ex.printStackTrace();
			}
		}
		return preferences;
	}
	 
	abstract void handleCenterHeteroSelectionRaiser(molecule.ui.adjust.center.hetero.signal.CenterHeteroSelectionRaiser raiser);
	 
	abstract void handleCenterNucleicRaiser(molecule.ui.adjust.center.nucleic.signal.CenterNucleicRaiser raiser);
	 
	abstract void handleCenterProteinPrimaryRaiser(molecule.ui.adjust.center.protein.primary.signal.CenterProteinPrimaryRaiser raiser);
	 
	abstract void handleCenterProteinQuaternaryRaiser(molecule.ui.adjust.center.protein.quaternary.signal.CenterProteinQuaternaryRaiser raiser);
	 
	abstract void handleCenterProteinSecondaryRaiser(molecule.ui.adjust.center.protein.secondary.signal.CenterProteinSecondaryRaiser raiser);
	 
	abstract void handleCenterProteinTertiaryRaiser(molecule.ui.adjust.center.protein.tertiary.signal.CenterProteinTertiaryRaiser raiser);
	 
	abstract void handleCenterWaterSelectionRaiser(molecule.ui.adjust.center.water.signal.CenterWaterSelectionRaiser raiser);
	 
	abstract void handleRestrictRadiusRaiser(molecule.ui.adjust.signal.RestrictRadiusRaiser raiser);
	 
	public void raise_AdjustInfoEvent()
	{
		(new molecule.ui.signal.AdjustInfoEvent(this)).raise();
	}
	 
	public void removeNotify()
	{
		super.removeNotify();
		getAdapter().removeHandled(molecule.ui.adjust.center.water.signal.CenterWaterSelectionEvent.class);
		getAdapter().removeHandled(molecule.ui.adjust.center.protein.primary.signal.CenterProteinPrimaryEvent.class);
		getAdapter().removeHandled(molecule.ui.adjust.center.protein.tertiary.signal.CenterProteinTertiaryEvent.class);
		getAdapter().removeHandled(molecule.ui.adjust.center.protein.quaternary.signal.CenterProteinQuaternaryEvent.class);
		getAdapter().removeHandled(molecule.ui.adjust.center.protein.secondary.signal.CenterProteinSecondaryEvent.class);
		getAdapter().removeHandled(molecule.ui.adjust.center.nucleic.signal.CenterNucleicEvent.class);
		getAdapter().removeHandled(molecule.ui.adjust.center.hetero.signal.CenterHeteroSelectionEvent.class);
		getAdapter().removeHandled(molecule.ui.adjust.signal.RestrictRadiusEvent.class);
	}
	 
}
/* Generated by star.annotations.GeneratedClass, all changes will be lost */

package molecule.ui.hetero;

public abstract class HeteroPanel_generated extends molecule.ui.AbstractNonProteinMoleculeUI implements molecule.ui.signal.RenderingInfoRaiser, star.event.EventController, star.event.Listener
{
	private java.util.prefs.Preferences preferences = null;
	private static final long serialVersionUID = 1L;

	public  HeteroPanel_generated()
	{
		super();
	}
	 
	public void addNotify()
	{
		super.addNotify();
		getAdapter().addHandled(molecule.ui.hetero.signal.HeteroHBondTranslucencyEvent.class);
		getAdapter().addHandled(molecule.ui.hetero.signal.HeteroApplyRenderingEvent.class);
		getAdapter().addHandled(molecule.ui.hetero.signal.HeteroFilterEvent.class);
		getAdapter().addHandled(molecule.ui.hetero.signal.HeteroBondTranslucencyEvent.class);
		getAdapter().addHandled(molecule.ui.hetero.signal.HeteroSelectionEvent.class);
		getAdapter().addHandled(molecule.ui.hetero.signal.HeteroSizeEvent.class);
		getAdapter().addHandled(molecule.ui.hetero.signal.HeteroHBondSizeEvent.class);
		getAdapter().addHandled(molecule.ui.hetero.signal.HeteroTranslucencyEvent.class);
		getAdapter().addHandled(molecule.ui.hetero.signal.HeteroRenderingModeEvent.class);
	}
	 
	public void eventRaised(final star.event.Event event)
	{
		eventRaisedHandles(event);
	}
	 
	private void eventRaisedHandles(final star.event.Event event)
	{
		if( event.getClass().getName().equals( "molecule.ui.hetero.signal.HeteroHBondTranslucencyEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handleHeteroHBondTranslucencyRaiser( (molecule.ui.hetero.signal.HeteroHBondTranslucencyRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleHeteroHBondTranslucencyRaiser "  + ( end-start )/1000000 ); } }},this,2);
		}if( event.getClass().getName().equals( "molecule.ui.hetero.signal.HeteroApplyRenderingEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handleHeteroApplyRenderingRaiser( (molecule.ui.hetero.signal.HeteroApplyRenderingRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleHeteroApplyRenderingRaiser "  + ( end-start )/1000000 ); } }},this,2);
		}if( event.getClass().getName().equals( "molecule.ui.hetero.signal.HeteroFilterEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handleHeteroFilterRaiser( (molecule.ui.hetero.signal.HeteroFilterRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleHeteroFilterRaiser "  + ( end-start )/1000000 ); } }},this,2);
		}if( event.getClass().getName().equals( "molecule.ui.hetero.signal.HeteroBondTranslucencyEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handleHeteroBondTranslucencyRaiser( (molecule.ui.hetero.signal.HeteroBondTranslucencyRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleHeteroBondTranslucencyRaiser "  + ( end-start )/1000000 ); } }},this,2);
		}if( event.getClass().getName().equals( "molecule.ui.hetero.signal.HeteroSelectionEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handleHeteroSelectionRaiser( (molecule.ui.hetero.signal.HeteroSelectionRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleHeteroSelectionRaiser "  + ( end-start )/1000000 ); } }},this,2);
		}if( event.getClass().getName().equals( "molecule.ui.hetero.signal.HeteroSizeEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handleHeteroSizeRaiser( (molecule.ui.hetero.signal.HeteroSizeRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleHeteroSizeRaiser "  + ( end-start )/1000000 ); } }},this,2);
		}if( event.getClass().getName().equals( "molecule.ui.hetero.signal.HeteroHBondSizeEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handleHeteroHBondSizeRaiser( (molecule.ui.hetero.signal.HeteroHBondSizeRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleHeteroHBondSizeRaiser "  + ( end-start )/1000000 ); } }},this,2);
		}if( event.getClass().getName().equals( "molecule.ui.hetero.signal.HeteroTranslucencyEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handleHeteroTranslucencyRaiser( (molecule.ui.hetero.signal.HeteroTranslucencyRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleHeteroTranslucencyRaiser "  + ( end-start )/1000000 ); } }},this,2);
		}if( event.getClass().getName().equals( "molecule.ui.hetero.signal.HeteroRenderingModeEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handleHeteroRenderingModeRaiser( (molecule.ui.hetero.signal.HeteroRenderingModeRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleHeteroRenderingModeRaiser "  + ( end-start )/1000000 ); } }},this,2);
		}
	}
	 
	public java.util.prefs.Preferences getPreferences(java.lang.String name)
	{
		try
		{
			plugin.preferences.Preferences pref = (plugin.preferences.Preferences) plugin.Loader.getDefaultLoader().getPlugin(plugin.preferences.Preferences.class.getName(), plugin.preferences.PreferencesImplementation.class.getName());
			this.preferences = pref.getPreferences(name);
		}
		catch( plugin.PluginException ex )
		{
			ex.printStackTrace();
		}
		return preferences;
	}
	 
	public java.util.prefs.Preferences getPreferences()
	{
		if( preferences == null )
		{
			try
			{
				plugin.preferences.Preferences pref = (plugin.preferences.Preferences) plugin.Loader.getDefaultLoader().getPlugin(plugin.preferences.Preferences.class.getName(), plugin.preferences.PreferencesImplementation.class.getName());
				this.preferences = pref.getPreferences("molecule.ui.hetero.HeteroPanel");
			}
			catch( plugin.PluginException ex )
			{
				ex.printStackTrace();
			}
		}
		return preferences;
	}
	 
	abstract void handleHeteroApplyRenderingRaiser(molecule.ui.hetero.signal.HeteroApplyRenderingRaiser raiser);
	 
	abstract void handleHeteroBondTranslucencyRaiser(molecule.ui.hetero.signal.HeteroBondTranslucencyRaiser raiser);
	 
	abstract void handleHeteroFilterRaiser(molecule.ui.hetero.signal.HeteroFilterRaiser raiser);
	 
	abstract void handleHeteroHBondSizeRaiser(molecule.ui.hetero.signal.HeteroHBondSizeRaiser raiser);
	 
	abstract void handleHeteroHBondTranslucencyRaiser(molecule.ui.hetero.signal.HeteroHBondTranslucencyRaiser raiser);
	 
	abstract void handleHeteroRenderingModeRaiser(molecule.ui.hetero.signal.HeteroRenderingModeRaiser raiser);
	 
	abstract void handleHeteroSelectionRaiser(molecule.ui.hetero.signal.HeteroSelectionRaiser raiser);
	 
	abstract void handleHeteroSizeRaiser(molecule.ui.hetero.signal.HeteroSizeRaiser raiser);
	 
	abstract void handleHeteroTranslucencyRaiser(molecule.ui.hetero.signal.HeteroTranslucencyRaiser raiser);
	 
	public void raise_RenderingInfoEvent()
	{
		(new molecule.ui.signal.RenderingInfoEvent(this)).raise();
	}
	 
	public void removeNotify()
	{
		super.removeNotify();
		getAdapter().removeHandled(molecule.ui.hetero.signal.HeteroHBondTranslucencyEvent.class);
		getAdapter().removeHandled(molecule.ui.hetero.signal.HeteroApplyRenderingEvent.class);
		getAdapter().removeHandled(molecule.ui.hetero.signal.HeteroFilterEvent.class);
		getAdapter().removeHandled(molecule.ui.hetero.signal.HeteroBondTranslucencyEvent.class);
		getAdapter().removeHandled(molecule.ui.hetero.signal.HeteroSelectionEvent.class);
		getAdapter().removeHandled(molecule.ui.hetero.signal.HeteroSizeEvent.class);
		getAdapter().removeHandled(molecule.ui.hetero.signal.HeteroHBondSizeEvent.class);
		getAdapter().removeHandled(molecule.ui.hetero.signal.HeteroTranslucencyEvent.class);
		getAdapter().removeHandled(molecule.ui.hetero.signal.HeteroRenderingModeEvent.class);
	}
	 
}
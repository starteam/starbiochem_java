/* Generated by star.annotations.GeneratedClass, all changes will be lost */

package molecule.ui;

public abstract class MoleculeContainer_generated extends javax.swing.JPanel implements app.signal.CloseMoleculeRaiser, app.signal.RenderAllRaiser, molecule.ui.signal.RenderingInfoRaiser, star.event.EventController, star.event.Listener
{
	private star.event.Adapter adapter;
	private static final long serialVersionUID = 1L;

	public  MoleculeContainer_generated()
	{
		super();
	}
	 
	public  MoleculeContainer_generated(boolean boolean0)
	{
		super( boolean0);
	}
	 
	public  MoleculeContainer_generated(java.awt.LayoutManager layoutManager, boolean boolean0)
	{
		super( layoutManager,boolean0);
	}
	 
	public  MoleculeContainer_generated(java.awt.LayoutManager layoutManager)
	{
		super( layoutManager);
	}
	 
	public void addNotify()
	{
		super.addNotify();
		getAdapter().addHandled(app.signal.ViewForegroundColorEvent.class);
		getAdapter().addHandled(app.signal.TrackGlassPaneEvent.class);
		getAdapter().addHandled(app.signal.ViewHydrogensEvent.class);
		getAdapter().addHandled(app.signal.ViewBackgroundColorEvent.class);
		getAdapter().addHandled(app.signal.ViewStructureOptionsEvent.class);
	}
	 
	public void eventRaised(final star.event.Event event)
	{
		eventRaisedHandles(event);
	}
	 
	private void eventRaisedHandles(final star.event.Event event)
	{
		if( event.getClass().getName().equals( "app.signal.ViewForegroundColorEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handleViewForegroundColorRaiser( (app.signal.ViewForegroundColorRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleViewForegroundColorRaiser "  + ( end-start )/1000000 ); } }},this,2);
		}if( event.getClass().getName().equals( "app.signal.TrackGlassPaneEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handleTrackGlassPaneRaiser( (app.signal.TrackGlassPaneRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleTrackGlassPaneRaiser "  + ( end-start )/1000000 ); } }},this,2);
		}if( event.getClass().getName().equals( "app.signal.ViewHydrogensEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handleViewHydrogensRaiser( (app.signal.ViewHydrogensRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleViewHydrogensRaiser "  + ( end-start )/1000000 ); } }},this,2);
		}if( event.getClass().getName().equals( "app.signal.ViewBackgroundColorEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handleViewBackgroundColorRaiser( (app.signal.ViewBackgroundColorRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleViewBackgroundColorRaiser "  + ( end-start )/1000000 ); } }},this,2);
		}if( event.getClass().getName().equals( "app.signal.ViewStructureOptionsEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handleViewStructureOptionsRaiser( (app.signal.ViewStructureOptionsRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleViewStructureOptionsRaiser "  + ( end-start )/1000000 ); } }},this,2);
		}
	}
	 
	public star.event.Adapter getAdapter()
	{
		if( adapter == null )
		{
			adapter = new star.event.Adapter(this);
		}
		return adapter;
	}
	 
	abstract void handleTrackGlassPaneRaiser(app.signal.TrackGlassPaneRaiser raiser);
	 
	abstract void handleViewBackgroundColorRaiser(app.signal.ViewBackgroundColorRaiser raiser);
	 
	abstract void handleViewForegroundColorRaiser(app.signal.ViewForegroundColorRaiser raiser);
	 
	abstract void handleViewHydrogensRaiser(app.signal.ViewHydrogensRaiser raiser);
	 
	abstract void handleViewStructureOptionsRaiser(app.signal.ViewStructureOptionsRaiser raiser);
	 
	public void raise_CloseMoleculeEvent()
	{
		(new app.signal.CloseMoleculeEvent(this)).raise();
	}
	 
	public void raise_RenderAllEvent()
	{
		(new app.signal.RenderAllEvent(this)).raise();
	}
	 
	public void raise_RenderingInfoEvent()
	{
		(new molecule.ui.signal.RenderingInfoEvent(this)).raise();
	}
	 
	public void removeNotify()
	{
		super.removeNotify();
		getAdapter().removeHandled(app.signal.ViewForegroundColorEvent.class);
		getAdapter().removeHandled(app.signal.TrackGlassPaneEvent.class);
		getAdapter().removeHandled(app.signal.ViewHydrogensEvent.class);
		getAdapter().removeHandled(app.signal.ViewBackgroundColorEvent.class);
		getAdapter().removeHandled(app.signal.ViewStructureOptionsEvent.class);
	}
	 
}
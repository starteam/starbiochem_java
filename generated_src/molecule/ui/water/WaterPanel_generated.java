/* Generated by star.annotations.GeneratedClass, all changes will be lost */

package molecule.ui.water;

public abstract class WaterPanel_generated extends molecule.ui.AbstractNonProteinMoleculeUI implements molecule.ui.signal.RenderingInfoRaiser, star.event.EventController, star.event.Listener
{
	private java.util.prefs.Preferences preferences = null;
	private static final long serialVersionUID = 1L;

	public  WaterPanel_generated()
	{
		super();
	}
	 
	public void addNotify()
	{
		super.addNotify();
		getAdapter().addHandled(molecule.ui.water.signal.WaterFilterEvent.class);
		getAdapter().addHandled(molecule.ui.water.signal.WaterHBondTranslucencyEvent.class);
		getAdapter().addHandled(molecule.ui.water.signal.WaterApplyRenderingEvent.class);
		getAdapter().addHandled(molecule.ui.water.signal.WaterSelectionEvent.class);
		getAdapter().addHandled(molecule.ui.water.signal.WaterBondTranslucencyEvent.class);
		getAdapter().addHandled(molecule.ui.water.signal.WaterTranslucencyEvent.class);
		getAdapter().addHandled(molecule.ui.water.signal.WaterHBondSizeEvent.class);
		getAdapter().addHandled(molecule.ui.water.signal.WaterSizeEvent.class);
		getAdapter().addHandled(molecule.ui.water.signal.WaterRenderingModeEvent.class);
		getAdapter().addHandled(app.signal.RenderAllEvent.class);
	}
	 
	public void eventRaised(final star.event.Event event)
	{
		eventRaisedHandles(event);
	}
	 
	private void eventRaisedHandles(final star.event.Event event)
	{
		if( event.getClass().getName().equals( "molecule.ui.water.signal.WaterFilterEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handleWaterFilterRaiser( (molecule.ui.water.signal.WaterFilterRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleWaterFilterRaiser "  + ( end-start )/1000000 ); } }},this,2);
		}if( event.getClass().getName().equals( "molecule.ui.water.signal.WaterHBondTranslucencyEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handleWaterHBondTranslucencyRaiser( (molecule.ui.water.signal.WaterHBondTranslucencyRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleWaterHBondTranslucencyRaiser "  + ( end-start )/1000000 ); } }},this,2);
		}if( event.getClass().getName().equals( "molecule.ui.water.signal.WaterApplyRenderingEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handleWaterApplyRenderingRaiser( (molecule.ui.water.signal.WaterApplyRenderingRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleWaterApplyRenderingRaiser "  + ( end-start )/1000000 ); } }},this,2);
		}if( event.getClass().getName().equals( "molecule.ui.water.signal.WaterSelectionEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handleWaterSelectionRaiser( (molecule.ui.water.signal.WaterSelectionRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleWaterSelectionRaiser "  + ( end-start )/1000000 ); } }},this,2);
		}if( event.getClass().getName().equals( "molecule.ui.water.signal.WaterBondTranslucencyEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handleWaterBondTranslucencyRaiser( (molecule.ui.water.signal.WaterBondTranslucencyRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleWaterBondTranslucencyRaiser "  + ( end-start )/1000000 ); } }},this,2);
		}if( event.getClass().getName().equals( "molecule.ui.water.signal.WaterTranslucencyEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handleWaterTranslucencyRaiser( (molecule.ui.water.signal.WaterTranslucencyRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleWaterTranslucencyRaiser "  + ( end-start )/1000000 ); } }},this,2);
		}if( event.getClass().getName().equals( "molecule.ui.water.signal.WaterHBondSizeEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handleWaterHBondSizeRaiser( (molecule.ui.water.signal.WaterHBondSizeRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleWaterHBondSizeRaiser "  + ( end-start )/1000000 ); } }},this,2);
		}if( event.getClass().getName().equals( "molecule.ui.water.signal.WaterSizeEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handleWaterSizeRaiser( (molecule.ui.water.signal.WaterSizeRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleWaterSizeRaiser "  + ( end-start )/1000000 ); } }},this,2);
		}if( event.getClass().getName().equals( "molecule.ui.water.signal.WaterRenderingModeEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handleWaterRenderingModeRaiser( (molecule.ui.water.signal.WaterRenderingModeRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleWaterRenderingModeRaiser "  + ( end-start )/1000000 ); } }},this,2);
		}if( event.getClass().getName().equals( "app.signal.RenderAllEvent" ) && event.isValid() ) 
		{
			 utils.Runner.runOnThread(new Runnable() { public void run() { 
			 long start = System.nanoTime();
			handleRenderAllRaiser( (app.signal.RenderAllRaiser)event.getSource());
			 long end = System.nanoTime();
			 if( end - start > 500000000 ) { System.out.println( this.getClass().getName() + ".handleRenderAllRaiser "  + ( end-start )/1000000 ); } }},this,2);
		}
	}
	 
	public java.util.prefs.Preferences getPreferences(java.lang.String name)
	{
		try
		{
			plugin.preferences.Preferences pref = (plugin.preferences.Preferences) plugin.Loader.getDefaultLoader().getPlugin(plugin.preferences.Preferences.class.getName(), plugin.preferences.PreferencesImplementation.class.getName());
			this.preferences = pref.getPreferences(name);
		}
		catch( plugin.PluginException ex )
		{
			ex.printStackTrace();
		}
		return preferences;
	}
	 
	public java.util.prefs.Preferences getPreferences()
	{
		if( preferences == null )
		{
			try
			{
				plugin.preferences.Preferences pref = (plugin.preferences.Preferences) plugin.Loader.getDefaultLoader().getPlugin(plugin.preferences.Preferences.class.getName(), plugin.preferences.PreferencesImplementation.class.getName());
				this.preferences = pref.getPreferences("molecule.ui.water.WaterPanel");
			}
			catch( plugin.PluginException ex )
			{
				ex.printStackTrace();
			}
		}
		return preferences;
	}
	 
	abstract void handleRenderAllRaiser(app.signal.RenderAllRaiser raiser);
	 
	abstract void handleWaterApplyRenderingRaiser(molecule.ui.water.signal.WaterApplyRenderingRaiser raiser);
	 
	abstract void handleWaterBondTranslucencyRaiser(molecule.ui.water.signal.WaterBondTranslucencyRaiser raiser);
	 
	abstract void handleWaterFilterRaiser(molecule.ui.water.signal.WaterFilterRaiser raiser);
	 
	abstract void handleWaterHBondSizeRaiser(molecule.ui.water.signal.WaterHBondSizeRaiser raiser);
	 
	abstract void handleWaterHBondTranslucencyRaiser(molecule.ui.water.signal.WaterHBondTranslucencyRaiser raiser);
	 
	abstract void handleWaterRenderingModeRaiser(molecule.ui.water.signal.WaterRenderingModeRaiser raiser);
	 
	abstract void handleWaterSelectionRaiser(molecule.ui.water.signal.WaterSelectionRaiser raiser);
	 
	abstract void handleWaterSizeRaiser(molecule.ui.water.signal.WaterSizeRaiser raiser);
	 
	abstract void handleWaterTranslucencyRaiser(molecule.ui.water.signal.WaterTranslucencyRaiser raiser);
	 
	public void raise_RenderingInfoEvent()
	{
		(new molecule.ui.signal.RenderingInfoEvent(this)).raise();
	}
	 
	public void removeNotify()
	{
		super.removeNotify();
		getAdapter().removeHandled(molecule.ui.water.signal.WaterFilterEvent.class);
		getAdapter().removeHandled(molecule.ui.water.signal.WaterHBondTranslucencyEvent.class);
		getAdapter().removeHandled(molecule.ui.water.signal.WaterApplyRenderingEvent.class);
		getAdapter().removeHandled(molecule.ui.water.signal.WaterSelectionEvent.class);
		getAdapter().removeHandled(molecule.ui.water.signal.WaterBondTranslucencyEvent.class);
		getAdapter().removeHandled(molecule.ui.water.signal.WaterTranslucencyEvent.class);
		getAdapter().removeHandled(molecule.ui.water.signal.WaterHBondSizeEvent.class);
		getAdapter().removeHandled(molecule.ui.water.signal.WaterSizeEvent.class);
		getAdapter().removeHandled(molecule.ui.water.signal.WaterRenderingModeEvent.class);
		getAdapter().removeHandled(app.signal.RenderAllEvent.class);
	}
	 
}